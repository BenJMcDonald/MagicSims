package magicGame;

import java.util.ArrayList;

public class Player {

	String[] deckList;
	ArrayList<Card> deck;
	ArrayList<Card> hand;
	// Have I lost the game?
	boolean hasLost;
	int life;
	GameState gameState;
	// Have I played a land this turn?
	boolean playedLand;

	// Mana open is a length 6 int array that stores avaliable mana in
	// alphabetical color order, with colorless last. The specific order is
	// [Black, Blue, Green, White, Red, Colorless]
	private int[] manaOpen;

	public Player(String[] newDeck, GameState gameState) {
		this.hasLost = false;
		playedLand = false;
		this.life = 20;
		this.deckList = newDeck;
		deck = new ArrayList<Card>();
		hand = new ArrayList<Card>();
		this.gameState = gameState;
		this.manaOpen = new int[6];

		for (String cardName : this.deckList) {
			Card card = CardDB.getCard(cardName, this);
			this.deck.add(card);
		}

	}

	public ArrayList<Card> getDeck() {
		return this.deck;
	}

	public ArrayList<Card> getHand() {
		return this.hand;
	}

	public boolean draw(int numToDraw) {
		for (int i = 0; i < numToDraw; i++) {
			if (deck.size() == 0) {
				this.hasLost = true;
				return this.hasLost;
			}
			this.hand.add(this.deck.remove(0));
		}
		return this.hasLost;
	}

	public boolean loses() {
		return this.hasLost;
	}

	public int getLife() {
		return this.life;
	}

	public int setLife(int newLife) {
		this.life = newLife;
		return this.life;
	}

	public int changeLife(int lifeChangeIncrement) {
		this.life += lifeChangeIncrement;
		return this.life;
	}

	public void chooseBlockers() {
		// TODO Auto-generated method stub

	}

	public void playMainPhase() {
		// Look for a land to play, and play it.
		Card c;
		for (int i = 0; i < this.hand.size(); i++) {
			c = this.hand.get(i);
			if (c.types.equals("Land") && this.playedLand == false) {
				this.gameState.addPermanent(this.hand.remove(i));
				break;
			}

		}

		this.evaluateOpenMana();

		// Evaluate playable cards, and play the creature with the most power,
		// if possible. No creature in magic has a power less than or equal to
		// -2, so we'll start with that default value.
		while (true) {
			int maxPowerIndex = -1;
			int maxPower = -2;
			String manaCost = "";
			boolean isPlayable = false;
			for (int i = 0; i < this.hand.size(); i++) {
				c = this.hand.get(i);
				if (c.types.equals("Creature")) {
					if ((c.power > maxPower) && this.evaluateCardPlayable(c)) {

						maxPower = c.power;
						maxPowerIndex = i;
					}
				}
			}

		}
	}

	// This determines the mana cost of the card via the same method that the
	// evaluateOpenMana evaluates avaliable mana, but using the cost string that
	// each card has, instead of building up a fresh string.
	private boolean evaluateCardPlayable(Card c) {
		// The mana cost array looks at mana in alphabetical order for colors,
		// with colorless last. The specific order is [Black, Blue, Green, Red,
		// White, Colorless].
		int[] manaCost = { 0, 0, 0, 0, 0, 0 };
		for (char ch : c.cost.toCharArray()) {
			switch (ch) {
			case 'B':
				manaCost[0]++;
				break;
			case 'U':
				manaCost[1]++;
				break;
			case 'G':
				manaCost[2]++;
				break;
			case 'R':
				manaCost[3]++;
				break;
			case 'W':
				manaCost[4]++;
				break;
			case '1':
				manaCost[5]++;
				break;
			default:
				break;
			}
		}

		return false;
	}

	// Here, we evaluate open mana by building a string of open mana and
	// parsing it into integers on a case-by-case basis.
	private void evaluateOpenMana() {
		String openMana = this.gameState.openMana(this);
		this.manaOpen= new int[6];
		for (char ch : openMana.toCharArray()) {
			switch (ch) {
			case 'B':
				this.manaOpen[0]++;
				break;
			case 'U':
				this.manaOpen[1]++;
				break;
			case 'G':
				this.manaOpen[2]++;
				break;
			case 'R':
				this.manaOpen[3]++;
				break;
			case 'W':
				this.manaOpen[4]++;
				break;
			case '1':
				this.manaOpen[5]++;
				break;
			default:
				break;

			}

		}

	}
}
